// SPDX-License-Identifier: MIT
pragma solidity ^0.8.13;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol";
import "@openzeppelin/contracts/utils/Counters.sol";

contract Open House Realty is ERC721URIStorage {
  using Counters for Counters.Counter;
  Counters.Counter private _tokenIds;
  address SellerContract;
  event NFTMinted(uint256);

  constructor(address _SellerContract) ERC721 ///design to pull from active listings mls# as example:/// ("6591070", "85259") {
    SellerContract = _SellerContract;
  }

  function mint(string memory _tokenURI) public {
    _tokenIds.increment();
    uint256 newTokenId = _tokenIds.current();
    _safeMint(msg.sender, newTokenId);
    _setTokenURI(newTokenId, _tokenURI);
    setApprovalForAll(marketplaceContract, true);
    emit NFTMinted(newTokenId);
  }
}


Listing/Seller/FSBO: 

}

contract Escrow {
address public nftAddress; 
address payable seller; 
address payable optional lender;
address payable optional listing real estate broker;
address payable optional listing buyer broker;
address payable optional title company;
address payable owner's title insurance; 
address payable optional notary;
address payable optional home warranty; 
address payable optional HOA; 
address payable optional inspector; 
address payable optional HVAC; 
address payable optional Roofer;
address payable optional Pool;
address payable optional Landscaping;
address payable optional Maintenance-other;
address payable optional appraiser;
address payable optional Moving company;
address payable public Tax Assessments;
address payable public county taxes;
address payable public optional payoff first loan;
address payable public optional payoff second lien;
address payable public optional payoff third lien;
address payable public optional payoff fourth lien;
address payable public optional payoff fifth lien;
address payable public optional payoff sixth lien;
address payable public optional payoff seventh lien;
address payable public optional payoff eighth lien;
address payable public optional payoff ninth lien;
address payable public optional payoff tenth lien;

mapping (unint256

____________________________________________________________________________________________________________________________________________________________________________

 

///to create and deploy an NFT project on the Dogechain network: 

pragma solidity ^0.8.4;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract MyNFT is ERC721, Ownable {
    constructor() ERC721("MyNFT", "MNFT") {}

    function mintNFT(address recipient, string memory tokenURI) public onlyOwner {
        uint256 newTokenId = totalSupply().add(1);
        _mint(recipient, newTokenId);
        _setTokenURI(newTokenId, tokenURI);
    }
}

///dogechain

pragma solidity ^0.8.4;
import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract RealEstateNFT is ERC721, Ownable {
    uint256 public totalSupply;

    struct Property {
        string propertyAddress;
        uint256 price;
        bool isSold;
    }

    mapping(uint256 => Property) public properties;
    mapping(uint256 => address) public propertyOwners;

    constructor() ERC721("RealEstateNFT", "RENFT") {}

    function createProperty(string memory _propertyAddress, uint256 _price) external onlyOwner {
        uint256 propertyId = totalSupply++;
        properties[propertyId] = Property(_propertyAddress, _price, false);
    }

    function buyProperty(uint256 _propertyId) external payable {
        require(msg.value >= properties[_propertyId].price, "Insufficient funds");
        require(!properties[_propertyId].isSold, "Property is already sold");

        propertyOwners[_propertyId] = msg.sender;
        properties[_propertyId].isSold = true;

        _safeMint(msg.sender, _propertyId);
    }

    function getProperty(uint256 _propertyId) external view returns (string memory, uint256, bool) {
        return (properties[_propertyId].propertyAddress, properties[_propertyId].price, properties[_propertyId].isSold);

___________


pragma solidity ^0.8.0;

contract RealEstate {
    
    // Property struct to store property details
    struct Property {
        uint propertyId;
        string address;
        uint price;
        address payable owner;
        bool isSold;
    }

    // Mapping to store properties
    mapping(uint => Property) public properties;
    
    // Events to emit when properties are added and sold
    event PropertyAdded(uint indexed propertyId, string address, uint price);
    event PropertySold(uint indexed propertyId, address indexed buyer, uint price);

    constructor() {}

    // Function to add a new property
    function addProperty(uint _propertyId, string memory _address, uint _price) public {
        require(_propertyId > 0, "Invalid property ID.");
        require(bytes(_address).length > 0, "Invalid address.");
        require(_price > 0, "Invalid price.");

        // Check if property is already added
        require(!properties[_propertyId].isSold, "Property is already sold.");

        // Create a new property
        Property memory newProperty = Property(_propertyId, _address, _price, msg.sender, false);

        // Store the property
        properties[_propertyId] = newProperty;

        // Emit event
        emit PropertyAdded(_propertyId, _address, _price);
    }

    // Function to buy a property
    function buyProperty(uint _propertyId) public payable {
        require(_propertyId > 0, "Invalid property ID.");

        // Fetch the property
        Property memory property = properties[_propertyId];

        // Check if property exists and is not sold
        require(property.propertyId > 0 && !property.isSold, "Invalid or sold property.");

        // Check if the buyer sent enough ether
        require(msg.value >= property.price, "Insufficient funds.");

        // Transfer ownership
________________________________________________________________________________________________________________________________________________________________________________
/// to deploy - replace the following code with truffle.config:
const HDWalletProvider = require('@truffle/hdwallet-provider');
const mnemonic = 'your_mnemonic_phrase_here';

module.exports = {
  networks: {
    development: {
      host: '127.0.0.1',
      port: 7545,
      network_id: '*',
    },
    goerli: {
      provider: () => new HDWalletProvider(mnemonic, 'goerli_rpc_url_here'),
      network_id: 5,
      gas: 4600000,
      gasPrice: 10000000000,
    },
  },
  compilers: {
    solc: {
      version: '0.8.4',
    },
  },
};

_______________________________________________________________________________________________________________________________________________________________________________

///To ensure our ability to update the legal language and terms of our purchase contract and disclosure templates without having to redeploy the entire contract, we can separate the legal language 
and terms from the contract core logic so we can update legal language and terms without affecting the core functionality of the contract. We can store the legal language and terms in a separate file 
or database off-chain, and reference them in our Solidity contract using a hash or identifier. This way, when we need to update the legal language and terms, we can simply update the 
off-chain file or database, and the changes will be reflected in the contract.

Here's an example of how we can separate the legal language and terms from the contract core logic:

Create a JSON file or database with the legal language and terms, for example:
json
{
  "legal_terms": {
    "version": "1.0",
    "terms": "This is the legal language and terms for the purchase contract."
  }
}
In our Solidity contract, reference the legal language and terms using a hash or identifier, for example:
solidity
pragma solidity ^0.8.0;

contract PurchaseContract {
    bytes32 public legalTermsHash;

    constructor(bytes32 _legalTermsHash) {
        legalTermsHash = _legalTermsHash;
    }

    function getLegalTerms() public view returns (string memory) {
        // Retrieve the legal language and terms from the off-chain file or database
        // using the legalTermsHash and return the terms
    }
}
To update the legal language and terms, we update the off-chain file or database and deploy a new version of the contract with the updated legalTermsHash.

By separating the legal language and terms from the contract core logic, we can make updates to the legal language and terms without having to redeploy the entire contract, which can save
you time and gas fees. 

That solves the forms updating problem.
_____________________________________________________________________________________________________________________________________________________________________

///Digital Signature Feature: The following code demonstrates how to sign and verify a message using the Elliptic Curve Digital Signature Algorithm (ECDSA) in Solidity.

pragma solidity ^0.8.0;

import "@openzeppelin/contracts/utils/cryptography/ECDSA.sol";

contract SignatureExample {
    using ECDSA for bytes32;

    function signMessage(bytes32 messageHash, bytes32 r, bytes32 s, uint8 v) public pure returns (address) {
        return messageHash.toEthSignedMessageHash().recover(r, s, v);
    }

    function verifySignature(address signer, bytes32 messageHash, bytes32 r, bytes32 s, uint8 v) public pure returns (bool) {
        return signer == messageHash.toEthSignedMessageHash().recover(r, s, v);
    }
}

______________________________________________________________________________________________________________________________________________________________________________

/// a smart contract template in Solidity that has placeholders for inserting your own custom contracts. 
This template is based on ERC-721 standard for NFTs. 
You can replace the placeholders with your custom code to create a unique smart contract.///

pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract MyCustomContract is ERC721, Ownable {
    constructor() ERC721("MyCustomContract", "MCC") {
        // Custom code here
    }

    function mint(address to, uint256 tokenId) public onlyOwner {
        _mint(to, tokenId);
        // Custom code here
    }

    function burn(uint256 tokenId) public {
        _burn(tokenId);
        // Custom code here
    }

    // Custom contract code here
}

____________________________________________________________________________________________________________________________________________________________________________________


///Foundational RE smart contract protocol likeness:

Sale requires authentication using an ownership key. The sale opens escrow with the public part of a newly created ownership key. 		
A Dogecoin is deposited on that key, call the amount T. Additionally the property has a digital SPDS & CLUE from the seller, and an identification key which has the public part in the certificate.		
 This allows the seller to disclose property details to third parties.		
		
When the property is sold, the following protocol is used:		

1. The buyer generates a nonce (random number) and asks the seller to accept the buyer's offer and send them  (SPDS, CLUE, HOA info) all related disclosures.

2. The seller gives the contract that nonce, and the seller returns the contract with a data structure signed with its identification key. 		
The data contains the nonce, the property's public records, disclosure documents from seller, the public key of the seller, and the transaction+merkle branch which transferred ownership last time. 		
This ensures the buyer knows what they are getting and that it came from the real seller (it's not a replay).		
		
		
3. The seller selects a key to receive the earnest funds payment, k1, and names their price P.		
	Or the seller selects a key to open escrow with a title company {}	
		Seller-carry contracts (with title or just smart contract?)
		
4. The buyer generates a new ownership key, k2.		
		
5. The buyer creates a transaction with two inputs and two outputs. The first input signs for P coins. The second input is connected to the output holding T coins for the ownership address. 		
The first output sends P coins to k1 and the second output sends T coins to k2. This transaction is not valid because only the first input can be signed. The buyer passes this partially complete transaction to the seller, who then signs the second input with the car's current ownership key and broadcasts the transaction.		
The buyer passes this partially complete transaction to the seller, who then signs the second input with the property's current ownership key and broadcasts the transaction.		
		
6. They wait for some confirmations.		
		
7. The buyer presents the property with the Dogecoin transaction, a merkle branch linking it to the block header and then enough block headers to fill in the gap from the property's current ownership transaction. 		
Title (or smart contract alone) sees that the new transaction re-assigns ownership and is further along in the chain than its current one, plus it has enough work piled on top to be sure the tx won't be reversed.		
 It then updates its ownership information. Smart contract needs just enough data to be able to connect future block headers to the one it was previously presented with.		
		
In practice this process would likely be handled using smartphones with NFC hardware -- the act of touching the phone containing the ownership key to the dashboard would start this dApp.

After clearing all contingencies, the money can be paid, deal finalized & deed recorded. 		
		
